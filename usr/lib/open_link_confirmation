#!/bin/bash

## This file is part of Whonix.
## Copyright (C) 2012 - 2014 Patrick Schleizer <adrelanos@riseup.net>
## See the file COPYING for copying conditions.

#set -x

main_function() {
   ## Used by tb-starter.
   export OPEN_LINK_CONFIRMATION="true"

   local i

   for i in /etc/open_link_confirm.d/*; do
      if [ -f "$i" ]; then
         ## If the last character is a ~, ignore that file,
         ## because it was created by some editor,
         ## which creates backup files.
         if [ "${i: -1}" = "~" ]; then
            continue
         fi
         ## Skipping files such as .dpkg-old and .dpkg-dist.
         if ( echo "$i" | grep -q ".dpkg-" ); then
            true "skip $i"
            continue
         fi
         ## TODO
         bash -n "$i" || exit 1
         source "$i"
      fi
   done

   if [ "$#" = "0" ]; then
      ## Zero arguments.
      local is_file="0"
   fi

   if [[ -f "${1+"$@"}" ]]; then
      local is_file="1"
   else
      local is_file="0"
   fi

   ## For simulating a Gateway, comment in the next line and comment out the over next one.
   #if [ true ]; then

   if [ -f "/usr/share/anon-gw-base-files/gateway" ]; then
      local icon="/usr/share/icons/anon-icon-pack/whonix.ico"

      if [ ! "$EDITOR" = "" ]; then
         local open_in_tool_bin="$EDITOR"
         local open_in_tool_bin_name="\$EDITOR $EDITOR"
      ## What other useful condition could we check to determine the default editor?
      #elif [ "1" = "2" ]; then
         #local open_in_tool_bin="?"
         #local open_in_tool_bin_name="?"
      else
         local open_in_tool_bin="kwrite"
         local open_in_tool_bin_name="KWrite"
      fi

      local open_in_tool_extra_opts=""

      if [ "$is_file" = "1" ]; then
         ## We could easily change our mind and ask for confirmation.
         local title="Link Confirm Open"
         #local msg="${1+"$@"} will be opened in $open_in_tool_bin_name. Continue?"

         local open_in_tool_exit_code
         open_in_tool_exit_code="0"
         $open_in_tool_bin $open_in_tool_extra_opts ${1+"$@"} >/dev/null 2>/dev/null || { open_in_tool_exit_code="$?" ; true; };
         exit "$open_in_tool_exit_code"
      else
         local icon="error"
         local title="Link Confirm Open ERROR"
         local msg="<p>Link Confirm Open does not support opening links on Gateway for security reasons.</p>
<p>Use Tor Browser under Workstation to browse the internet.</p>"
         local question=""
         local button="ok"
         /usr/lib/msgcollector/generic_gui_message "$icon" "$title" "$msg" "$question" "$button"
         exit 0
      fi

   else
      local icon="/usr/share/icons/anon-icon-pack/whonix.ico"
      local open_in_tool_bin="x-www-browser"
      local open_in_tool_bin_name_readlink="$(readlink -f "/usr/bin/x-www-browser")"
      local open_in_tool_bin_name="x-www-browser ($open_in_tool_bin_name_readlink)"
      #local open_in_tool_extra_opts="--new-window"

      local trim="128"

      local temp
      temp="${1+"$@"}"

      local temp_string_length
      temp_string_length="${#temp}"

      ## Trim temp to 128 characters.
      temp="${temp:0:$trim}"

      temp="$(/usr/lib/msgcollector/striphtml "$temp")"

      if [ "$temp_string_length" -gt "$trim" ]; then
         local extra_long_link="<p><b>Note</b>: The address is too long, so only the first <u>$trim</u> characters are shown.</p>"
      fi

      if [ "$is_file" = "1" ]; then
         local type="file"
      else
         local type="link"
      fi

      if [ "$open_in_tool_bin_name_readlink" = "$BASH_SOURCE" ]; then
         local icon="error"
         local title="Link Confirm Open ERROR"
         local msg="<p>The following <b>$type</b> cannot be opened in <u>$open_in_tool_bin_name</u>, because no browser is installed, that supports open-link-confirmation.</p>
<p><blockquote><code>$temp$extra_long_link</code><blockquote></p>"
         local question=""
         local button="ok"
         /usr/lib/msgcollector/generic_gui_message "$icon" "$title" "$msg" "$question" "$button"
         exit 0
      elif [ "$temp" = "" ] || [ "$temp" = " " ]; then
         local icon="warning"
         local title="Confirm Open"
         local msg="<p>Be careful if <b>$open_in_tool_bin_name</b> is already running as your activities might get linked.</p>
<p>$temp$extra_long_link</p>"
         local question="Do you want to open <b>$open_in_tool_bin_name</b>?"
         local button="yesno"
      else
         local icon="warning"
         local title="Confirm Open"
         local msg="<p>The following <b>$type</b> will be opened in <u>$open_in_tool_bin_name</u>.</p>
<p>Be careful if <u>$open_in_tool_bin_name</u> is already running as your activities might get linked.</p>
<p><blockquote><code>$temp$extra_long_link</code><blockquote></p>"
         local question="Continue?"
         local button="yesno"
      fi
   fi

   local answer
   answer="0"

   local ask_for_confirmation="1"
   if [ "$is_file" = "1" ]; then
      ## Got a File.
      if [ "$link_confirmation_for_files" = "0" ]; then
         local ask_for_confirmation="0"
      else
         local ask_for_confirmation="1"
      fi
   else
      ## Got a Link.
      if [ "$link_confirmation_for_links" = "0" ]; then
         local ask_for_confirmation="0"
      else
         local ask_for_confirmation="1"
      fi
   fi

   if [ "$ask_for_confirmation" = "1" ]; then
      answer="$(/usr/lib/msgcollector/generic_gui_message "$icon" "$title" "$msg" "$question" "$button")"
   fi

   if [ ! "$answer" = "16384" ]; then ## Button 'Yes' has not been pressed.
      exit 0
   fi

   local command_v_exit_code
   command_v_exit_code="0"
   command -v $open_in_tool_bin >/dev/null 2>/dev/null || { command_v_exit_code="$?" ; true; };

   if [ ! "$command_v_exit_code" = "0" ]; then
      local msg="<p><b><u>ERROR</b></u>: <b>$open_in_tool_bin</b> does not exist! Please report this bug!</p>"
      /usr/lib/msgcollector/generic_gui_message "$icon" "$title" "$msg" "$question" "$button"
      exit 1
   fi

   local open_in_tool_exit_code
   open_in_tool_exit_code="0"
   $open_in_tool_bin $open_in_tool_extra_opts ${1+"$@"} >/dev/null 2>/dev/null || { open_in_tool_exit_code="$?" ; true; };

   if [ ! "$open_in_tool_exit_code" = "0" ]; then
      local msg="<p><b><u>ERROR</b></u>: <b>$open_in_tool_bin</b> returned <u>$open_in_tool_exit_code</u>! Please report this bug!</p>"
      /usr/lib/msgcollector/generic_gui_message "$icon" "$title" "$msg" "$question" "$button"
   fi

   exit "$open_in_tool_exit_code"
}

main_function "${1+"$@"}"
